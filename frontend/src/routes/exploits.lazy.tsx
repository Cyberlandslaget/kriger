import { createLazyFileRoute } from "@tanstack/react-router";
import AutoSizer from "react-virtualized-auto-sizer";
import { forwardRef, useCallback, useState } from "react";
import { FixedSizeList as List } from "react-window";
import { Loader2Icon, PlayIcon } from "lucide-react";
import { useAtom, useAtomValue } from "jotai";
import { exploitsAtom, flagStatusAggregateAtom } from "../utils/atoms";
import { updateExploit, executeExploit } from "../services/rest";
import type { Exploit } from "../services/models";
import { toast } from "sonner";
import { Switch } from "../components/Switch";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
} from "../components/Dialog";

export const Route = createLazyFileRoute("/exploits")({
  component: () => Exploits(),
});

function Exploits() {
  const flagStatusAggregate = useAtomValue(flagStatusAggregateAtom);

  const [openDialog, setOpenDialog] = useState(false);
  const [selectedExploit, setSelectedExploit] = useState<{
    type: "toggle" | "execute";
    exploit: Exploit;
  }>();
  const [isLoading, setIsLoading] = useState(false);
  const [exploits, setExploits] = useAtom(exploitsAtom);

  const onToggleExploitHandler = useCallback(
    (exploit: Exploit, checked: boolean) => {
      if (isLoading) return;
      setIsLoading(true);

      const updatedExploit = {
        ...exploit,
        manifest: { ...exploit.manifest, enabled: checked },
      };
      const updatedExploits =
        exploits &&
        [
          ...exploits.filter((e) => e.manifest.name !== exploit.manifest.name),
          updatedExploit,
        ].sort(
          (a, b) =>
            a.manifest.service.localeCompare(b.manifest.service) +
            a.manifest.name.localeCompare(b.manifest.name),
        );

      toast.promise(updateExploit(updatedExploit), {
        loading: "Loading...",
        success: (_) => {
          setExploits(updatedExploits);
          setOpenDialog(false);
          setIsLoading(false);
          return `${exploit.manifest.name} successfully ${checked ? "enabled" : "disabled"}`;
        },
        error: (_) => {
          setIsLoading(false);
          return `Couldn't toggle exploit ${exploit.manifest.name}`;
        },
      });
    },
    [exploits, setExploits, isLoading],
  );

  const onExecuteExploitHandler = useCallback(
    async (exploit: Exploit) => {
      if (isLoading) return;
      setIsLoading(true);

      try {
        await executeExploit(exploit);
        toast.success(`${exploit.manifest.name} successfully executed`);
        setOpenDialog(false);
      } catch (_) {
        toast.error(`Couldn't execute exploit ${exploit.manifest.name}`);
      }
      setIsLoading(false);
    },
    [isLoading],
  );

  return (
    <main className="relative grid grid-rows-1 gap-3 min-h-0 h-[calc(100vh-6rem)]">
      <div className="flex flex-col h-full relative rounded-md">
        <AutoSizer>
          {({ height, width }) => (
            <List
              height={height}
              itemCount={exploits?.length ?? 0}
              itemSize={64}
              width={width}
              innerElementType={forwardRef(({ children, ...rest }, ref) => (
                <table ref={ref} {...rest} className="relative">
                  <thead className="sticky top-0 bg-primary-bg h-10 z-10">
                    <tr className="flex mb-2 gap-2 text-left">
                      <th className="min-w-16 h-10 items-center font-bold p-2 shadow-inner bg-slate-950/30 border-slate-950 border-opacity-20 border-2 rounded-sm" />
                      <th className="min-w-24 max-w-48 w-full h-10 items-center font-bold p-2 shadow-inner bg-slate-950/30 border-slate-950 border-opacity-20 border-2 rounded-sm">
                        Service
                      </th>
                      <th className="min-w-48 w-full h-10 items-center font-bold p-2 shadow-inner bg-slate-950/30 border-slate-950 border-opacity-20 border-2 rounded-sm">
                        Exploit
                      </th>
                      <th className="min-w-24 h-10 items-center font-bold p-2 shadow-inner bg-slate-950/30 border-slate-950 border-opacity-20 border-2 rounded-sm text-right">
                        Flags
                      </th>
                      <th className="min-w-36 h-10 items-center font-bold p-2 shadow-inner bg-slate-950/30 border-slate-950 border-opacity-20 border-2 rounded-sm" />
                    </tr>
                  </thead>
                  <tbody>{children}</tbody>
                </table>
              ))}
            >
              {({ index, style }) => {
                if (!exploits) return <></>;
                const exploit = exploits[index];
                const { manifest } = exploit;
                return (
                  <tr
                    key={`key-${index}`}
                    style={{ ...style }}
                    className="flex min-w-full !h-14 mt-12 gap-2 bg-slate-950 bg-opacity-30 border-slate-950 border-opacity-20 border-2"
                  >
                    <td className="flex min-w-16 h-full justify-center items-center">
                      <Switch
                        className="data-[state=checked]:!bg-green-500/90"
                        checked={manifest.enabled}
                        onCheckedChange={() => {
                          setOpenDialog(true);
                          setSelectedExploit({
                            type: "toggle",
                            exploit: exploit,
                          });
                        }}
                      />
                    </td>
                    <td className="min-w-24 max-w-48 w-full h-14">
                      <div className="w-full flex items-center p-1.5 h-full">
                        <p className="truncate" title={manifest.service}>
                          {manifest.service}
                        </p>
                      </div>
                    </td>
                    <td className="min-w-48 w-full h-14">
                      <div className="w-full flex items-center p-1.5 h-full">
                        <p className="truncate" title={manifest.name}>
                          {manifest.name}
                        </p>
                      </div>
                    </td>
                    <td className="max-w-24 w-full h-14">
                      <div className="w-full flex items-center justify-end p-1.5 h-full">
                        <p className="truncate">
                          {flagStatusAggregate.exploitCountMap.get(
                            manifest.name,
                          )}
                        </p>
                      </div>
                    </td>
                    <td className="flex min-w-36 h-full justify-center items-center">
                      <button
                        type="button"
                        className="flex justify-center items-center gap-2 py-2 px-4 bg-slate-950 bg-opacity-60 border-slate-950 border-opacity-20 border-2 rounded-md hover:bg-opacity-100"
                        onClick={() => {
                          setOpenDialog(true);
                          setSelectedExploit({
                            type: "execute",
                            exploit: exploit,
                          });
                        }}
                      >
                        <PlayIcon className="w-4 h-4" />
                        Execute
                      </button>
                    </td>
                  </tr>
                );
              }}
            </List>
          )}
        </AutoSizer>
        <Dialog open={openDialog} onOpenChange={setOpenDialog}>
          <DialogContent className="sm:max-w-[425px]">
            <DialogHeader>
              <DialogTitle>
                {selectedExploit?.type === "execute"
                  ? `Execute ${selectedExploit.exploit.manifest.name}?`
                  : `Toggle ${selectedExploit?.exploit.manifest.name}?`}
              </DialogTitle>
              <DialogDescription>
                Are you actually super duper very sure?
              </DialogDescription>
              <button
                type="button"
                className="!mt-8 flex justify-center items-center gap-2 py-2 px-4 bg-slate-950 bg-opacity-60 border-slate-950 border-opacity-20 border-2 rounded-md hover:bg-opacity-100"
                onClick={() => {
                  if (selectedExploit?.type === "execute")
                    onExecuteExploitHandler(selectedExploit.exploit);
                  else if (selectedExploit?.type === "toggle")
                    onToggleExploitHandler(
                      selectedExploit.exploit,
                      !selectedExploit.exploit.manifest.enabled,
                    );
                }}
                disabled={isLoading}
              >
                {isLoading && <Loader2Icon className="h-4 w-4 animate-spin" />}
                Yes
              </button>
            </DialogHeader>
          </DialogContent>
        </Dialog>
      </div>
    </main>
  );
}
